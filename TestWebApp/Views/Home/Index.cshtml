@model TestWebApp.Models.HomeViewModels

@*     This If loop runs before CSV model has been uploaded. Once CSV has been uploaded, Model.Uploaded is changed to True so that the Else loop runs    *@
@if (Model.Uploaded == false)
{
    @*    Create form asking for file upload, with post method so that the HttpPost action method is run after the upload.   *@
    @*    Enctype attribute ensures that actual file is uploaded, not just file name    *@
    <div class="jumbotron">
        <h2>@Model.Title</h2>
        <h4>@Model.Message</h4>
        <form method="post" enctype="multipart/form-data">
            <input type="file" accept=".csv" name="CSV" required/>
            <br />
            <input type="submit" value="Upload CSV" name="CSV" formaction="/Home/Index/" />
        </form>
    </div>
}

@*     Once CSV has been uploaded, Model.Uploaded is changed to True. Thus this section of code runs when the Index View is initialized    *@
else
{
    <div class="jumbotron">

        <h2>@Model.Title</h2>

        @*     If there is no exception from parsing the data, then the table containg employee data is displayed on the page    *@
        @if (Model.Exception == null)
        {

        <h4>@Model.Message</h4>

        <h5>A field that appears blank contained invalid data.</h5>

        <table class="table table-bordered table-hover table-striped table-responsive">
            <thead>
                <tr>
                    <td align="center"><strong>Full Name</strong></td>
                    <td align="center"><strong>Birthdate</strong></td>
                    <td align="center"><strong>Salary</strong></td>
                    <td align="center"><strong>Date Hired</strong></td>
                    <td align="center"><strong>Record Valid?</strong></td>
                    <td align="center"><strong>GUID</strong></td>
                </tr>
            </thead>
            <tbody>
                @*   Replace MinValues with blank text for a neater display    *@
                @*   Cast valid Salary, Birthday, and DateHired to string type, formatted for neat display    *@
                @foreach (var line in Model.EmployeesDBs)
                {

                    var Sal = String.Empty;
                    if (line.Salary != 0)
                    {
                        Sal = line.Salary.ToString("c");
                    }

                    var Bday = String.Empty;
                    if (line.Birthdate != DateTime.Parse("07/04/1776"))
                    {
                        Bday = line.Birthdate.ToString("MM/dd/yyyy");
                    }

                    var Hireday = String.Empty;
                    if (line.DateHired != DateTime.Parse("07/04/1776"))
                    {
                        Hireday = line.DateHired.ToString("MM/dd/yyyy");
                    }
                    <tr>
                        <td>@line.FullName</td>
                        <td>@Bday</td>
                        <td align="right">@Sal</td>
                        <td>@Hireday</td>
                        <td>@line.PrintIfValid</td>
                        <td>@line.Guid</td>
                    </tr>
                }
            </tbody>
        </table>
        }

        @*     If there is an exception from parsing the data, then the Exception error message is displayed   *@
        else
        {
        <h4>@Model.Message</h4>
        <h5>@Model.Exception</h5>
        }
    </div>
}